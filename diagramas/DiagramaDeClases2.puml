@startuml

' Realciones
CentralNuclear *-r- Operador
CentralNuclear *-l- Reactor
CentralNuclear *-- Tablero
CentralNuclear *-- RefrigerableStrategy

Reactor *-- EstadoReactor
Reactor *-- INucleo
Reactor o-- ICombustible
Reactor *-- IGenerador

EstadoReactorCritico o-- ISuscriptorEstadoCritico

Nucleo *-- ISensor
Nucleo o-- BarraDeControl

TurbinaDeRefrigeracionStrategy *-- TurbinaDeRefrigeracion
BarraDeControlStrategy *-- BarraDeControl

Sensor o-- ISuscriptorTemperatura
Operador o-- Alerta
Tablero o-- IMostrable

' Clases
' Nico y Abril
class CentralNuclear{
    - _operadores: Operador[]
    - _reactores: Reactor[]
    - _tableros: tablero[]
    - _estrategia: RefrigerableStrategy
    - _alarma: Alarma
 
    +getStrategy(): RefrigerableStrategy
    +setStrategy(strategy: RefrigerableStrategy)
    +agregarOperador(operador: Operador)
    +quitarOperador(operador: Operador)
    +activarMecanismoEnfriamiento()
    +encenderReactor()
    +apagarReactor()
}

'cami
class Reactor{
    - estado: EstadoReactor
    - nucleo: INucleo
    - combustible: ICombustible
    - generador: IGenerador 
    + cambiarEstado(estado: EstadoReactor)
    + iniciar()
    + detener()
}

'fede
interface IGenerador {
    + generarEnergia()
}

class Generador implements IGenerador {

}

'cami
interface ICombustible {
    + cantidadCombustible(cantCombustible : number)
    + getCantidadCombustible()
    + porcentajeAumentoTemperatura() : number
}

'cami
class Combustible implements ICombustible {
    - _cantidadCombustible : number
    - _porcentajeAumentoTemperatura : number

    + cantidadCombustible(cantCombustible : number)
    +  getCantidadCombustible() : number
    + porcentajeAumentoTemperatura() : number 

}

' Observer
'cami
interface ISensor{
    + getTemperaturaNucleo()
    + suscribir()
    + desuscribir()
    + notificar()
}
'cami
class Sensor implements ISensor{
    -_subscriptores[]: ISuscriptorTemperatura
    + getTemperaturaNucleo()
    + suscribir()
    + desuscribir()
    + notificar()
}
'cami
interface ISuscriptorTemperatura{
    + actualizarTemperatura(temperatura)
}
'fede
abstract class Tablero implements ISuscriptorTemperatura{
    # indicadores: IMostrable[]
    + actualizarTemperatura(temperatura)
    + abstracto mostrar()
}
'fede
class tableroConsola extends Tablero{
    + mostrar()
    - mostrarConsola

}
'fede
interface IMostrable {
    mostrar()
}

' nico y abril
interface INucleo{
    + setTemperatura(temperatura: number)
}

' nico y abril
class Nucleo implements INucleo{
    - _temperatura: number
    - _sensor: ISensor
    - _barraDeControl: BarraDeControl
    + getSensor():Sensor
}

'Strategy ' nico y abril

interface RefrigerableStrategy{
    + enfriar(reactor : Reactor)
}

class BarraDeControlStrategy implements RefrigerableStrategy{
    - _barras : BarraDeControl[]
    - _barrasUsadas : number

    + getBarrasUsadas() : number
    - restablecerBarrasUsadas()
    + agregarBarra(barra : BarrasDeControl)
    + quitarBarra(barra : BarrasDeControl)
    - esUtil(barra : BarraDeControl) : boolean
    + enfriar(reactor : Reactor) : void
}

class BarraDeControl{
    - _porcentajeReduccion: number
    - _tiempoVidaUtil: number

    + getPorcentajeReduccion(): number
    + getTiempoVidaUtil(): number
    + setTiempoVidaUtil(tiempo: number)
    - actualizarUtilidad()
    - restarUtilidad()
}

class TurbinaDeRefrigeracionStrategy implements RefrigerableStrategy{
    - turbina: TurbinaDeRefrigeracion
    + enfriar(reactor : Reactor) : void
}

class TurbinaDeRefrigeracion {
    - _porcentajeReduccion: number
    - _activo: boolean

    + activar()
    + desactivar()
    + getPorcentajeReduccion(): number
}

' State + Observer Estado
'  nico y abril
abstract class EstadoReactor{
    # _reactor: Reactor
    + generarEnergia()
    + actualizaEstado()
}

' fede
interface ISuscriptorEstadoCritico{
    + recibirAlerta(estado: EstadoReactor)
}

' nico y abril    
class EstadoReactorCritico extends EstadoReactor{
    + pasarApagado()
    + generarEnergia()
}
' nico y abril
class EstadoReactorDisminuido extends EstadoReactor{
    - _subscriptores: ISuscriptorEstado[]
    + notificarOperardor()
    + generarEnergia()
    + suscribir(suscriptor: ISuscriptorEstado)
    + dessuscribir(suscriptor: ISuscriptorEstado)
    'fede
    + notificarEstado(EstadoReactor)
 }

' nico y abril
class EstadoReactorNormal extends EstadoReactor{
    + generarEnergia()
}
' nico y abril
class EstadoReactorApagado extends EstadoReactor{
    + detener()
    + actualizarEstado(EstadoReactor)
    ' fede falta observer jefes
 }

' nico y abril
class EstadoReactorEncendido extends EstadoReactor{
    + iniciar()  
 }

' nico y abril
class Operador implements ISuscriptorEstadoCritico{
    _legajo: number
    _alerta: Alerta[]
    + activarProcoloEnfriamiento(reactor: Reactor)
    + recibirAlerta(estado: EstadoReactor)
    'activar protocolo
}

' nico y abril
class Alerta{
    estado: EstadoReactor
} 


@enduml
