@startuml Diagrama

title Diagrama de Clases

skinparam BackgroundColor papayawhip

CentralNuclear *-- Reactor

Reactor *-d- EstadoReactor
Reactor *-r- INucleo
Reactor o-l- ICombustible
Reactor *-l- IGenerador

EstadoReactor -r[HIDDEN]- EstadoReactorApagado
EstadoReactor -r[HIDDEN]- EstadoReactorEncendido

Generador o.. ISuscriptorEnergiaNeta

EstadoReactorCritico o-- ISuscriptorEstadoApagado
EstadoReactorDisminuido o-- ISuscriptorEstadoDisminuido

Nucleo *-- ISensor
Nucleo o-- BarraDeControl

Sensor o-- ISuscriptorTemperatura

BuilderReactor --> Reactor

DirectorReactor *-- IBuilderReactor

BuilderReactor .l.|> IBuilderReactor

' Clases
class CentralNuclear{
    - _operadores: Operador[]
    - _reactores: Reactor[]
    - _tableros: tablero[]
    - _estrategia: RefrigerableStrategy
    
    + activarMecanismoDeEnfriamiento()
    + agregarOperador(operador : Operador)
    + quitarOperador(operador : Operador)
    + encenderReactor()
    + apagarReactor()
}

class Reactor{
    - _capacidad : number
    - _combustible : ICombustible
    - _estado : EstadoReactor
    - _nucleo : INucleo
    - _generador : IGenerador
    - _energiaProducida : number

    + iniciar()
    + detener()
    + generarEnergia(horas : number)
}

class BuilderReactor{
    - capacidad : number
    - combustible : ICombustible
    - nucleo : INucleo
    - generador : IGenerador

    + setCapacidad(capacidad: number) : void
    + setCombustible(combustible: ICombustible) : void
    + setNucleo(nucleo: INucleo) : void
    + setGenerador(generador: IGenerador) : void
    + getReactor() : Reactor 
}
interface IBuilderReactor{
    + setCapacidad(capacidad : number) : void
    + setCombustible(combustible : ICombustible) : void
    + setNucleo(nucleo : INucleo) : void
    + setGenerador(generador : IGenerador) : void
}
class DirectorReactor{
    - builder : IBuilderReactor
    + cambiarBuilder( builder : IBuilderReactor) : void
    + crearReactor() : void
}


interface IGenerador {
    + generarEnergia(porcentajeCP : number, temp : number) : number
}

interface ISuscriptorEnergiaNeta{
    actualizarEnergiaNeta(energiaNeta: number):void
}

class Generador implements IGenerador {
    - _energiaNeta: number
    - _suscriptoresEnergiaNeta: ISuscriptorEnergiaNeta[]

    + generarEnergia(porcentajeCP : number, temp : number):number
    + calcularEnergiaNeta(temperactura: number): number
    + suscribir(suscriptor: ISuscriptorEnergiaNeta):void
    + desuscribir(suscriptor: ISuscriptorEnergiaNeta):void
    + notificarEnergiaNeta():void
}

interface ICombustible {
    + setCantidadCombustible(cantCombustible : number)
    + getCantidadCombustible() : number
    + getPorcentajeAumentoTemperatura() : number
}

class Combustible implements ICombustible {
    - _cantidadCombustible : number
    - _porcentajeAumentoTemperatura : number

    + setCantidadCombustible(cantCombustible : number)
    + getCantidadCombustible() : number
    + getPorcentajeAumentoTemperatura() : number
}

interface ISensor{
    + setTemperaturaReactor(temperatura : number)
    + getTemperaturaReactor () : number
}

class Sensor implements ISensor{
    - _temperaturaReactor : number
    - _suscriptores : ISuscriptorTemperatura[]

    + setTemperaturaReactor(temperatura : number)
    + getTemperaturaReactor () : number
    + suscribir()
    + desuscribir()
    + notificar()
}

interface ISuscriptorTemperatura{
    + actualizarTemperatura(temperatura : number) : void
}

interface INucleo{
    + setTemperatura(temperatura : number)
    + getTemperatura() : number
    + setSensor(sensor : ISensor) 
    + getSensor() : ISensor
    + insertarBarraDeControl(barra : BarrasDeControl) : void
    + sacarBarraDeControl() : void
}

class Nucleo implements INucleo{
    - _barraDeControl : BarrasDeControl
    - _temperatura : number
    - _sensor : ISensor
        
    + setTemperatura(temperatura : number)
    + getTemperatura() : number
    + setSensor(sensor : ISensor) 
    + getSensor() : ISensor
    + insertarBarraDeControl(barra : BarrasDeControl) : void
    + sacarBarraDeControl() : void
}

abstract class EstadoReactor{
    # _reactor: Reactor

    + abstract generarEnergia(horas : number) : void
    + setReactor(reactor : Reactor)
}

interface ISuscriptorEstadoDisminuido{
    + recibirAlerta(estado: EstadoReactor)
}

interface ISuscriptorEstadoApagado{
    + recibirAlerta(estado: EstadoReactor)
}
    
class EstadoReactorCritico extends EstadoReactor{
    - _suscriptores : ISuscriptorEstadoApagado[]

    + suscribir(suscriptor : ISuscriptorEstadoApagado)
    + desuscribir(suscriptor : ISuscriptorEstadoApagado)
    + generarEnergia(horas: number): void
    + notificarSrBurns()
    + situacionCritica(): void
}

class EstadoReactorDisminuido extends EstadoReactor{
    - _suscriptores : ISuscriptorEstadoDisminuido[]
    
    + generarEnergia(horas : number): void
    + suscribir(suscriptor : ISuscriptorEstadoDisminuido)
    + desuscribir(suscriptor : ISuscriptorEstadoDisminuido)
    + notificarEstado()
}

class EstadoReactorNormal extends EstadoReactor{
    + equals(estado : EstadoReactor) : boolean
    + generarEnergia(horas : number): void
}

class EstadoReactorApagado extends EstadoReactor{
    + generarEnergia(horas : number): void
}

class EstadoReactorEncendido extends EstadoReactor{
    + generarEnergia(horas : number): void
}

@enduml
