@startuml Diagrama de Clases RefrigerableStrategy

title Diagrama de Clases Estreategia Refrigeracion
skinparam BackgroundColor APPLICATION

' Relaciones
CentralNuclear *-l- Operador
CentralNuclear *-r- Reactor
CentralNuclear *-- RefrigerableStrategy

Reactor *-u- EstadoReactor
Reactor *-- INucleo

EstadoReactorCritico o-- ISuscriptorEstadoApagado
EstadoReactorDisminuido o-- ISuscriptorEstadoDisminuido

Nucleo *-- ISensor
Nucleo o-- BarraDeControl

TurbinaDeRefrigeracionStrategy *-- TurbinaDeRefrigeracion
BarraDeControlStrategy *-r- BarraDeControl

Sensor o-- ISuscriptorTemperatura
Operador o-- Alerta

' Clases
class CentralNuclear{
    - _instance : CentralNuclear
    - _operadores: Operador[]
    - _reactores: Reactor[]
    - _tableros: tablero[]
    - _estrategia: RefrigerableStrategy
    
    + getInstance()
    + activarMecanismoDeEnfriamiento()
    + agregarOperador(operador : Operador)
    + quitarOperador(operador : Operador)
    + encenderReactor()
    + apagarReactor()
}

class Reactor{
    - _capacidad : number
    - _combustible : ICombustible
    - _estado : EstadoReactor
    - _nucleo : INucleo
    - _generador : IGenerador
    - _energiaProducida : number

    + iniciar()
    + detener()
    + generarEnergia(horas : number)
}

interface ISensor{
    + setTemperaturaReactor(temperatura : number)
    + getTemperaturaReactor () : number
}

class Sensor implements ISensor{
    - _temperaturaReactor : number
    - _suscriptores : ISuscriptorTemperatura[]

    + setTemperaturaReactor(temperatura : number)
    + getTemperaturaReactor () : number
    + suscribir()
    + desuscribir()
    + notificar()
}

interface ISuscriptorTemperatura{
    + actualizarTemperatura(temperatura : number) : void
}

interface INucleo{
    + setTemperatura(temperatura : number)
    + getTemperatura() : number
    + setSensor(sensor : ISensor) 
    + getSensor() : ISensor
    + insertarBarraDeControl(barra : BarrasDeControl) : void
    + sacarBarraDeControl() : void
}

class Nucleo implements INucleo{
    - _barraDeControl : BarrasDeControl
    - _sensor : ISensor
        
    + setTemperatura(temperatura : number)
    + getTemperatura() : number
    + setSensor(sensor : ISensor) 
    + getSensor() : ISensor
    + insertarBarraDeControl(barra : BarrasDeControl) : void
    + sacarBarraDeControl() : void
}

interface RefrigerableStrategy{
    + disminuirTemperatura(porcentajeR : number, reactor : Reactor) : void
    + enfriar(reactor : Reactor) : void
}

class BarraDeControlStrategy implements RefrigerableStrategy{
    - _barras : BarrasDeControl[]
    - _barrasUsadas : number

    - restablecerBarrasUsadas()
    + agregarBarra(barra : BarrasDeControl)
    + quitarBarra(barra : BarrasDeControl)
    - esUtil(barra : BarrasDeControl) : boolean
    + disminuirTemperatura(porcentajeR : number, reactor : Reactor)
    + limpiarBarraInutiles()
    + enfriar(reactor : Reactor) : void
}

class BarraDeControl{
    - _porcentajeReduccion: number
    - _tiempoVidaUtil: number

    - actualizarUtilidad() : void
    - restarVidaUtil () : void
}

class TurbinaDeRefrigeracionStrategy implements RefrigerableStrategy{
    - _turbinas : Turbina[]

    + disminuirTemperatura(porcentajeR : number, reactor : Reactor) : void
    + enfriar(reactor : Reactor) : void
}

class TurbinaDeRefrigeracion {
    - _porcentajeReduccion: number
    - _activo: boolean

    + activar()
    + desactivar()
}

abstract class EstadoReactor{
    # _reactor: Reactor

    + abstract generarEnergia(horas : number) : void
    + setReactor(reactor : Reactor)
}

interface ISuscriptorEstadoDisminuido{
    + recibirAlerta(estado: EstadoReactor)
}

interface ISuscriptorEstadoApagado{
    + recibirAlerta(estado: EstadoReactor)
}
    
class EstadoReactorCritico extends EstadoReactor{
    - _suscriptores : ISuscriptorEstadoApagado[]

    + suscribir(suscriptor : ISuscriptorEstadoApagado)
    + desuscribir(suscriptor : ISuscriptorEstadoApagado)
    + generarEnergia(horas: number): void
    + notificarSrBurns()
    + situacionCritica(): void
}

class EstadoReactorDisminuido extends EstadoReactor{
    - _suscriptores : ISuscriptorEstadoDisminuido[]
    
    + generarEnergia(horas : number): void
    + suscribir(suscriptor : ISuscriptorEstadoDisminuido)
    + desuscribir(suscriptor : ISuscriptorEstadoDisminuido)
    + notificarEstado()
    - puedeGenerarEnergia(horaActual : number, horaLimite : number, cantCombustible : number, temperatura : number) : boolean
}

class EstadoReactorNormal extends EstadoReactor{
    + equals(estado : EstadoReactor) : boolean
    + generarEnergia(horas : number): void
    - puedeGenerarEnergia(horaActual : number, horaLimite : number, cantCombustible : number, temperatura : number) : boolean
}

class EstadoReactorApagado extends EstadoReactor{
    + generarEnergia(horas : number): void
}

class Operador implements ISuscriptorEstadoDisminuido{
    - _legajo : number
    - _alerta : Alerta[] = []
    - _strategy : RefrigerableStrategy

    + activarProtocoloDeEnfriamiento()
    + recibirAlerta(estado : EstadoReactor)
}

class SrBurns implements ISuscriptorEstadoApagado{
    -  static instance : SrBurns;
    - _alertas : Alerta[]

    + getInstance(): SrBurns
    + recibirAlerta(estado: EstadoReactor)
}

class Alerta{
    - _estado : EstadoReactor
} 

@enduml
