@startuml Diagrama de Clases
title "Diagrama de Clases"
skinparam ClassBackgroundColor LemonChiffon

'RELACIONES--------------------
CentralNuclear *-- Reactor
CentralNuclear o-l- Operador
CentralNuclear <-r- Tablero
CentralNuclear o-- IRefrigerable
Reactor <-- IEstadoReactor
Reactor -r[HIDDEN]- TurbinaDeRefrigeracion
Reactor -r[HIDDEN]- EstadoReactor
Reactor o-- INucleo
Reactor o-- ICombustible
Reactor o-- ISensor
Tablero o-- IMostrable
Tablero -r[HIDDEN]- TableroConsola
IMostrable -r[HIDDEN]- Alarma
Nucleo o-- BarraDeControl
INucleo -l[HIDDEN]- IEstadoReactor
Operador o-l- Mensaje
'-------------------------------


class CentralNuclear {
    - _reactor: Reactor
    - _operadores: Operador[]
    - _refrigerantes: IRefrigerable[]
    - _cantidadBarrasConsumidas: number
    - _alarma: Alarma
    - _tablero: Tablero

    +agregarRefrigerante(refrigerante: Refrigerable)
    +quitarRefrigerante(refrigerante: Refrigerante)
    +agregarOperador(operador: Operador)
    +quitarOperador(operador: Operador)
    +cantidadBarrasConsumidas()
    +controlarTemperatura()
    +activarMecanismoEnfriamiento()
    +encenderReactor()
    +apagarReactor()
}

class Reactor {
    - _capacidad : number
    - _combustible : ICombustible
    - _sensor : ISensor
    - _estadoReactorManager : IEstadoReactor
    - _nucleo : INucleo

    + iniciar()
    + detener()
    + dismnuirEnergia(porcentajeReduccionTemperatura : number)
    - generarEnergia(porcentajeAumentoTemperatura : number)
}

interface INucleo{
    + insertarBarraDeControl(barra: BarraDeControl)
    + obtenerBarraDecontrol (): BarraDeControl
}

class Nucleo implements INucleo {
    - barrasDeControl: IRefrigerable
    + insertarBarraDeControl(barra: BarraDeControl)
    + obtenerBarraDecontrol (): BarraDeControl
}

interface ICombustible {
    + cantidadCombustible(cantCombustible : number)
    + getCantidadCombustible()
    + porcentajeAumentoTemperatura() : number
}

class Combustible implements ICombustible {
    - _cantidadCombustible : number
    - _porcentajeAumentoTemperatura : number

    + cantidadCombustible(cantCombustible : number)
    +  getCantidadCombustible() : number
    + porcentajeAumentoTemperatura() : number 

}
interface IEstadoReactor{
    + actualizarEstado(temperatura : number) : void
}

class EstadoReactorManager implements IEstadoReactor{
    - _estado: EstadoReactor
    + actualizarEstado(temperatura : number) : void
}

class Sensor implements ISensor {
    - _temperatura : number
    + getTemperatura() : number
    + setTemperatura(temperatura: number)
}
interface ISensor {
    + temperaturaReactor(temperatura : number);
    + getTemperaturaReactor () : number;
}

interface IRefrigerable{
    + esUtil():boolean
    + getPorcentajeDeDisminucionTemperatura() : number
}

class BarraDeControl implements IRefrigerable {
    - _porcentajeReduccion: number
    - _tiempoVidaUtil: number

    + getPorcentajeReduccion(): number
    + getTiempoVidaUtil(): number
    + setTiempoVidaUtil(tiempo: number)
    + esUtil():boolean
    + getPorcentajeDeDisminucionTemperatura() : number
    - actualizarUtilidad()
    - restarUtilidad()
}


class TurbinaDeRefrigeracion implements IRefrigerable{
    - _porcentajeReduccion: number
    - _activo: boolean

    + activar()
    + desactivar()
    + getPorcentajeReduccion(): number
    + esUtil():boolean
    + getPorcentajeDeDisminucionTemperatura() : number
}

enum EstadoReactor{
    APAGADO
    NORMAL
    DISMINUIDO
    CRITICO
}

interface IMostrable{
    + mostrar()
}

class ValorTemperatura implements IMostrable{
    - _descripcion: string
    - _valor: numero
    + getTemperaturaReactor(sensor: Sensor)
    + mostrar()
}

class ValorEnergia implements IMostrable{
    - _descripcion: string
    - _valor: numero
    + getCantidadEnergia(sensor: Sensor)
    + mostrar()
}

class ValorEnergiaProducida implements IMostrable{
    - _descripcion: string
    - _valor: numero
    + getCantidadEnergia(sensor: Sensor)
    + mostrar()
}


class Alarma implements IMostrable{
    - _mensaje: Mensaje 
    + setMensaje (mensaje: Mensaje)
    + getMensaje (): Mensaje
    + mostrar()
    + enviar(casilla: Mensaje[])
}


abstract class  Tablero {
    - _indicadores: IMostrable[]
    - _temperaturas: number[]
    + actualizarIndicador(sensor: Sensor)
    + agregarAlarma(alarma: IMostrable)
    + mostrarIndicadores()
}

class TableroConsola extends Tablero {
    + mostrarIndicadores()
}

class Mensaje{
    - leido: boolean
    - mensaje: string
    +getterstsetters()
}

class Operador{
    - _legajo
    - _casilla: Mensaje[]
    + getLegajo()
    + activarProtocoloDeEnfriamiento(central: CentralNuclear)
}

@enduml