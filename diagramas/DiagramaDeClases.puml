@startuml Diagrama

' Relaciones
CentralNuclear *-- Operador
CentralNuclear *-- SrBurns
CentralNuclear *-- Reactor
CentralNuclear *-- Tablero
CentralNuclear *-- RefrigerableStrategy

Reactor *-- EstadoReactor
Reactor *-- INucleo
Reactor o-- ICombustible
Reactor *-- IGenerador

Generador o.. ISuscriptorEnergiaNeta

EstadoReactorCritico o-- ISuscriptorEstadoApagado
EstadoReactorDisminuido o-- ISuscriptorEstadoDisminuido

Nucleo *-- ISensor
Nucleo o-- BarraDeControl

TurbinaDeRefrigeracionStrategy *-- TurbinaDeRefrigeracion
BarraDeControlStrategy *-- BarraDeControl

Sensor o-- ISuscriptorTemperatura
Operador o-- Alerta
Tablero o-- Mostrable

BuilderReactor --> Reactor
BuilderReactor o-- ICombustible
BuilderReactor o-- INucleo
BuilderReactor o-- IGenerador

directorReactor *-- IBuilderReactor

BuilderReactor ..|> IBuilderReactor

' Clases
class CentralNuclear{
    - _operadores: Operador[]
    - _reactores: Reactor[]
    - _tableros: tablero[]
    - _estrategia: RefrigerableStrategy
    
    + activarMecanismoDeEnfriamiento()
    + agregarOperador(operador : Operador)
    + quitarOperador(operador : Operador)
    + encenderReactor()
    + apagarReactor()
}

class Reactor{
    - _capacidad : number
    - _combustible : ICombustible
    - _estado : EstadoReactor
    - _nucleo : INucleo
    - _generador : IGenerador
    - _energiaProducida : number

    + iniciar()
    + detener()
    + generarEnergia(horas : number)
}

class BuilderReactor{
    - capacidad : number
    - combustible : ICombustible
    - nucleo : INucleo
    - generador : IGenerador

    + setCapacidad(capacidad: number) : void
    + setCombustible(combustible: ICombustible) : void
    + setNucleo(nucleo: INucleo) : void
    + setGenerador(generador: IGenerador) : void
    + getReactor() : Reactor 
}
interface IBuilderReactor{
    + setCapacidad(capacidad : number) : void
    + setCombustible(combustible : ICombustible) : void
    + setNucleo(nucleo : INucleo) : void
    + setGenerador(generador : IGenerador) : void
}
class directorReactor{
    - builder : IBuilderReactor
    + cambiarBuilder( builder : IBuilderReactor) : void
    + crearReactor() : void
}


interface IGenerador {
    + generarEnergia(porcentajeCP : number, temp : number) : number
}

interface ISuscriptorEnergiaNeta{
    actualizarEnergiaNeta(energiaNeta: number):void
}

class Generador implements IGenerador {
    - _energiaNeta: number
    - _suscriptoresEnergiaNeta: ISuscriptorEnergiaNeta[]

    + generarEnergia(porcentajeCP : number, temp : number):number
    + calcularEnergiaNeta(temperactura: number): number
    + suscribir(suscriptor: ISuscriptorEnergiaNeta):void
    + desuscribir(suscriptor: ISuscriptorEnergiaNeta):void
    + notificarEnergiaNeta():void
}

interface ICombustible {
    + setCantidadCombustible(cantCombustible : number)
    + getCantidadCombustible() : number
    + getPorcentajeAumentoTemperatura() : number
}

class Combustible implements ICombustible {
    - _cantidadCombustible : number
    - _porcentajeAumentoTemperatura : number

    + setCantidadCombustible(cantCombustible : number)
    + getCantidadCombustible() : number
    + getPorcentajeAumentoTemperatura() : number
}

' Observer
interface ISensor{
    + setTemperaturaReactor(temperatura : number)
    + getTemperaturaReactor () : number
}

class Sensor implements ISensor{
    - _temperaturaReactor : number
    - _suscriptores : ISuscriptorTemperatura[]

    + setTemperaturaReactor(temperatura : number)
    + getTemperaturaReactor () : number
    + suscribir()
    + desuscribir()
    + notificar()
}

interface ISuscriptorTemperatura{
    + actualizarTemperatura(temperatura : number) : void
}

abstract class Tablero implements ISuscriptorEnergiaNeta, ISuscriptorTemperatura{
    # _energiaNeta: Mostrable
    # _temperatura: Mostrable

    + actualizarEnergiaNeta(energiaNeta: number): void
    + actualizarTemperatura(temperatura: number): void 
    + abstract mostrarIndicadores():void
}

class tableroConsola extends Tablero{
    + mostrarIndicadores()

}

class Mostrable{
    - _valor: number
    - _descripcion: string

    + mostrar():string
}

interface INucleo{
    + setTemperatura(temperatura : number)
    + getTemperatura() : number
    + setSensor(sensor : ISensor) 
    + getSensor() : ISensor
    + insertarBarraDeControl(barra : BarrasDeControl) : void
    + sacarBarraDeControl() : void
}

class Nucleo implements INucleo{
    - _barraDeControl : BarrasDeControl
    - _temperatura : number
    - _sensor : ISensor
        
    + setTemperatura(temperatura : number)
    + getTemperatura() : number
    + setSensor(sensor : ISensor) 
    + getSensor() : ISensor
    + insertarBarraDeControl(barra : BarrasDeControl) : void
    + sacarBarraDeControl() : void
}

' Strategy
interface RefrigerableStrategy{
    + disminuirTemperatura(porcentajeR : number, reactor : Reactor) : void
    + enfriar(reactor : Reactor) : void
}

class BarraDeControlStrategy implements RefrigerableStrategy{
    - _barras : BarrasDeControl[]
    - _barrasUsadas : number

    - restablecerBarrasUsadas()
    + agregarBarra(barra : BarrasDeControl)
    + quitarBarra(barra : BarrasDeControl)
    - esUtil(barra : BarrasDeControl) : boolean
    + disminuirTemperatura(porcentajeR : number, reactor : Reactor)
    + limpiarBarraInutiles()
    + enfriar(reactor : Reactor) : void
}

class BarraDeControl{
    - _porcentajeReduccion: number
    - _tiempoVidaUtil: number

    - actualizarUtilidad() : void
    - restarVidaUtil () : void
}

class TurbinaDeRefrigeracionStrategy implements RefrigerableStrategy{
    - _turbinas : Turbina[]

    + disminuirTemperatura(porcentajeR : number, reactor : Reactor) : void
    + enfriar(reactor : Reactor) : void
}

class TurbinaDeRefrigeracion {
    - _porcentajeReduccion: number
    - _activo: boolean

    + activar()
    + desactivar()
}

' State + Observer Estado
abstract class EstadoReactor{
    # _reactor: Reactor

    + abstract generarEnergia(horas : number) : void
    + setReactor(reactor : Reactor)
}

interface ISuscriptorEstadoDisminuido{
    + recibirAlerta(estado: EstadoReactor)
}

interface ISuscriptorEstadoApagado{
    + recibirAlerta(estado: EstadoReactor)
}
    
class EstadoReactorCritico extends EstadoReactor{
    - _suscriptores : ISuscriptorEstadoApagado[]

    + suscribir(suscriptor : ISuscriptorEstadoApagado)
    + desuscribir(suscriptor : ISuscriptorEstadoApagado)
    + generarEnergia(horas: number): void
    + notificarSrBurns()
    + situacionCritica(): void
}

class EstadoReactorDisminuido extends EstadoReactor{
    - _suscriptores : ISuscriptorEstadoDisminuido[]
    
    + generarEnergia(horas : number): void
    + suscribir(suscriptor : ISuscriptorEstadoDisminuido)
    + desuscribir(suscriptor : ISuscriptorEstadoDisminuido)
    + notificarEstado()
 }

class EstadoReactorNormal extends EstadoReactor{
    + equals(estado : EstadoReactor) : boolean
    + generarEnergia(horas : number): void
}

class EstadoReactorApagado extends EstadoReactor{
    + generarEnergia(horas : number): void
 }

class EstadoReactorEncendido extends EstadoReactor{
    + generarEnergia(horas : number): void
 }

class Operador implements ISuscriptorEstadoDisminuido{
    - _legajo : number
    - _alerta : Alerta[] = []
    - _strategy : RefrigerableStrategy

    + activarProtocoloDeEnfriamiento(central : CentralNuclear)
    + recibirAlerta(estado : EstadoReactor)
}

class SrBurns implements ISuscriptorEstadoApagado{
    -  static instance : SrBurns;
    - _alertas : Alerta[]

    + recibirAlerta(estado: EstadoReactor)
}

class Alerta{
    - _estado : EstadoReactor
} 

@enduml
